//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from pythia.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class pythiaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, CSET1C=9, 
		CSET1D=10, CSET0=11, NOTINSIDE=12, NOTBEFORE=13, NOTAFTER=14, NOTNEAR=15, 
		NOTOVERLAPS=16, NOTLALIGN=17, NOTRALIGN=18, ANDNOT=19, ORNOT=20, INSIDE=21, 
		BEFORE=22, AFTER=23, NEAR=24, OVERLAPS=25, LALIGN=26, RALIGN=27, AND=28, 
		OR=29, QVALUE=30, CONTAINS=31, STARTSWITH=32, ENDSWITH=33, REGEXP=34, 
		WILDCARDS=35, SIMILAR=36, LTEQ=37, GTEQ=38, EQ=39, EQN=40, NEQ=41, NEQN=42, 
		LT=43, GT=44, ID=45, SID=46, INT=47, LPAREN=48, RPAREN=49, LSQUARE=50, 
		RSQUARE=51, WS=52;
	public const int
		RULE_query = 0, RULE_corSet = 1, RULE_docSet = 2, RULE_docExpr = 3, RULE_txtExpr = 4, 
		RULE_pair = 5, RULE_spair = 6, RULE_tpair = 7, RULE_locop = 8, RULE_locExpr = 9, 
		RULE_locnArg = 10, RULE_locsArg = 11;
	public static readonly string[] ruleNames = {
		"query", "corSet", "docSet", "docExpr", "txtExpr", "pair", "spair", "tpair", 
		"locop", "locExpr", "locnArg", "locsArg"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'n'", "'m'", "'ns'", "'ms'", "'ne'", "'me'", "'s'", "'@@'", 
		"'@'", "';'", null, null, null, null, null, null, null, null, null, "'INSIDE'", 
		"'BEFORE'", "'AFTER'", "'NEAR'", "'OVERLAPS'", "'LALIGN'", "'RALIGN'", 
		"'AND'", "'OR'", null, "'*='", "'^='", "'$='", "'~='", "'?='", "'%='", 
		"'<='", "'>='", "'='", "'=='", "'<>'", "'!='", "'<'", "'>'", null, null, 
		null, "'('", "')'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "CSET1C", "CSET1D", 
		"CSET0", "NOTINSIDE", "NOTBEFORE", "NOTAFTER", "NOTNEAR", "NOTOVERLAPS", 
		"NOTLALIGN", "NOTRALIGN", "ANDNOT", "ORNOT", "INSIDE", "BEFORE", "AFTER", 
		"NEAR", "OVERLAPS", "LALIGN", "RALIGN", "AND", "OR", "QVALUE", "CONTAINS", 
		"STARTSWITH", "ENDSWITH", "REGEXP", "WILDCARDS", "SIMILAR", "LTEQ", "GTEQ", 
		"EQ", "EQN", "NEQ", "NEQN", "LT", "GT", "ID", "SID", "INT", "LPAREN", 
		"RPAREN", "LSQUARE", "RSQUARE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "pythia.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static pythiaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public pythiaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public pythiaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TxtExprContext txtExpr() {
			return GetRuleContext<TxtExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CorSetContext corSet() {
			return GetRuleContext<CorSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocSetContext docSet() {
			return GetRuleContext<DocSetContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CSET1C) {
				{
				State = 24;
				corSet();
				}
			}

			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CSET1D) {
				{
				State = 27;
				docSet();
				}
			}

			State = 30;
			txtExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CorSetContext : ParserRuleContext {
		public IToken delim;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSET1C() { return GetToken(pythiaParser.CSET1C, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSET0() { return GetToken(pythiaParser.CSET0, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(pythiaParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(pythiaParser.ID, i);
		}
		public CorSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_corSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterCorSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitCorSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCorSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CorSetContext corSet() {
		CorSetContext _localctx = new CorSetContext(Context, State);
		EnterRule(_localctx, 2, RULE_corSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			_localctx.delim = Match(CSET1C);
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 33;
				Match(ID);
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 38;
			_localctx.delim = Match(CSET0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocSetContext : ParserRuleContext {
		public IToken delim;
		[System.Diagnostics.DebuggerNonUserCode] public DocExprContext docExpr() {
			return GetRuleContext<DocExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSET1D() { return GetToken(pythiaParser.CSET1D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSET0() { return GetToken(pythiaParser.CSET0, 0); }
		public DocSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_docSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterDocSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitDocSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocSetContext docSet() {
		DocSetContext _localctx = new DocSetContext(Context, State);
		EnterRule(_localctx, 4, RULE_docSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_localctx.delim = Match(CSET1D);
			State = 41;
			docExpr(0);
			State = 42;
			_localctx.delim = Match(CSET0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pythiaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DocExprContext[] docExpr() {
			return GetRuleContexts<DocExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocExprContext docExpr(int i) {
			return GetRuleContext<DocExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pythiaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE() { return GetToken(pythiaParser.LSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TpairContext tpair() {
			return GetRuleContext<TpairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE() { return GetToken(pythiaParser.RSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(pythiaParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(pythiaParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDNOT() { return GetToken(pythiaParser.ANDNOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORNOT() { return GetToken(pythiaParser.ORNOT, 0); }
		public DocExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_docExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterDocExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitDocExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocExprContext docExpr() {
		return docExpr(0);
	}

	private DocExprContext docExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DocExprContext _localctx = new DocExprContext(Context, _parentState);
		DocExprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_docExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				State = 45;
				Match(LPAREN);
				State = 46;
				docExpr(0);
				State = 47;
				Match(RPAREN);
				}
				break;
			case LSQUARE:
				{
				State = 49;
				Match(LSQUARE);
				State = 50;
				tpair();
				State = 51;
				Match(RSQUARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 60;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DocExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_docExpr);
					State = 55;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 56;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANDNOT) | (1L << ORNOT) | (1L << AND) | (1L << OR))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 57;
					docExpr(4);
					}
					} 
				}
				State = 62;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TxtExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pythiaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TxtExprContext[] txtExpr() {
			return GetRuleContexts<TxtExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TxtExprContext txtExpr(int i) {
			return GetRuleContext<TxtExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pythiaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocExprContext locExpr() {
			return GetRuleContext<LocExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair() {
			return GetRuleContext<PairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(pythiaParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORNOT() { return GetToken(pythiaParser.ORNOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDNOT() { return GetToken(pythiaParser.ANDNOT, 0); }
		public TxtExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_txtExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterTxtExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitTxtExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTxtExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TxtExprContext txtExpr() {
		return txtExpr(0);
	}

	private TxtExprContext txtExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TxtExprContext _localctx = new TxtExprContext(Context, _parentState);
		TxtExprContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_txtExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 64;
				Match(LPAREN);
				State = 65;
				txtExpr(0);
				State = 66;
				Match(RPAREN);
				}
				break;
			case 2:
				{
				State = 68;
				locExpr();
				}
				break;
			case 3:
				{
				State = 69;
				pair();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 77;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TxtExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_txtExpr);
					State = 72;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 73;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANDNOT) | (1L << ORNOT) | (1L << OR))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 74;
					txtExpr(5);
					}
					} 
				}
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE() { return GetToken(pythiaParser.LSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE() { return GetToken(pythiaParser.RSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TpairContext tpair() {
			return GetRuleContext<TpairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpairContext spair() {
			return GetRuleContext<SpairContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 10, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(LSQUARE);
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 81;
				tpair();
				}
				break;
			case SID:
				{
				State = 82;
				spair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 85;
			Match(RSQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpairContext : ParserRuleContext {
		public IToken name;
		public IToken @operator;
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SID() { return GetToken(pythiaParser.SID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QVALUE() { return GetToken(pythiaParser.QVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(pythiaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(pythiaParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(pythiaParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTSWITH() { return GetToken(pythiaParser.STARTSWITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDSWITH() { return GetToken(pythiaParser.ENDSWITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(pythiaParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WILDCARDS() { return GetToken(pythiaParser.WILDCARDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(pythiaParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQN() { return GetToken(pythiaParser.EQN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQN() { return GetToken(pythiaParser.NEQN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(pythiaParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEQ() { return GetToken(pythiaParser.LTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(pythiaParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(pythiaParser.GTEQ, 0); }
		public SpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterSpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitSpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpairContext spair() {
		SpairContext _localctx = new SpairContext(Context, State);
		EnterRule(_localctx, 12, RULE_spair);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_localctx.name = Match(SID);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONTAINS) | (1L << STARTSWITH) | (1L << ENDSWITH) | (1L << REGEXP) | (1L << WILDCARDS) | (1L << SIMILAR) | (1L << LTEQ) | (1L << GTEQ) | (1L << EQ) | (1L << EQN) | (1L << NEQ) | (1L << NEQN) | (1L << LT) | (1L << GT))) != 0)) {
				{
				State = 88;
				_localctx.@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONTAINS) | (1L << STARTSWITH) | (1L << ENDSWITH) | (1L << REGEXP) | (1L << WILDCARDS) | (1L << SIMILAR) | (1L << LTEQ) | (1L << GTEQ) | (1L << EQ) | (1L << EQN) | (1L << NEQ) | (1L << NEQN) | (1L << LT) | (1L << GT))) != 0)) ) {
					_localctx.@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 89;
				_localctx.value = Match(QVALUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TpairContext : ParserRuleContext {
		public IToken name;
		public IToken @operator;
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(pythiaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QVALUE() { return GetToken(pythiaParser.QVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(pythiaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(pythiaParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(pythiaParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTSWITH() { return GetToken(pythiaParser.STARTSWITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDSWITH() { return GetToken(pythiaParser.ENDSWITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(pythiaParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WILDCARDS() { return GetToken(pythiaParser.WILDCARDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(pythiaParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQN() { return GetToken(pythiaParser.EQN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQN() { return GetToken(pythiaParser.NEQN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(pythiaParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEQ() { return GetToken(pythiaParser.LTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(pythiaParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(pythiaParser.GTEQ, 0); }
		public TpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterTpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitTpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TpairContext tpair() {
		TpairContext _localctx = new TpairContext(Context, State);
		EnterRule(_localctx, 14, RULE_tpair);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_localctx.name = Match(ID);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONTAINS) | (1L << STARTSWITH) | (1L << ENDSWITH) | (1L << REGEXP) | (1L << WILDCARDS) | (1L << SIMILAR) | (1L << LTEQ) | (1L << GTEQ) | (1L << EQ) | (1L << EQN) | (1L << NEQ) | (1L << NEQN) | (1L << LT) | (1L << GT))) != 0)) {
				{
				State = 93;
				_localctx.@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONTAINS) | (1L << STARTSWITH) | (1L << ENDSWITH) | (1L << REGEXP) | (1L << WILDCARDS) | (1L << SIMILAR) | (1L << LTEQ) | (1L << GTEQ) | (1L << EQ) | (1L << EQN) | (1L << NEQ) | (1L << NEQN) | (1L << LT) | (1L << GT))) != 0)) ) {
					_localctx.@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 94;
				_localctx.value = Match(QVALUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocopContext : ParserRuleContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pythiaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pythiaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEAR() { return GetToken(pythiaParser.NEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(pythiaParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(pythiaParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSIDE() { return GetToken(pythiaParser.INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(pythiaParser.OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LALIGN() { return GetToken(pythiaParser.LALIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RALIGN() { return GetToken(pythiaParser.RALIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNEAR() { return GetToken(pythiaParser.NOTNEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTBEFORE() { return GetToken(pythiaParser.NOTBEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTAFTER() { return GetToken(pythiaParser.NOTAFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTINSIDE() { return GetToken(pythiaParser.NOTINSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTOVERLAPS() { return GetToken(pythiaParser.NOTOVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTLALIGN() { return GetToken(pythiaParser.NOTLALIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTRALIGN() { return GetToken(pythiaParser.NOTRALIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocsArgContext locsArg() {
			return GetRuleContext<LocsArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocnArgContext[] locnArg() {
			return GetRuleContexts<LocnArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocnArgContext locnArg(int i) {
			return GetRuleContext<LocnArgContext>(i);
		}
		public LocopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterLocop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitLocop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocopContext locop() {
		LocopContext _localctx = new LocopContext(Context, State);
		EnterRule(_localctx, 16, RULE_locop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 97;
			_localctx.@operator = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOTINSIDE) | (1L << NOTBEFORE) | (1L << NOTAFTER) | (1L << NOTNEAR) | (1L << NOTOVERLAPS) | (1L << NOTLALIGN) | (1L << NOTRALIGN) | (1L << INSIDE) | (1L << BEFORE) | (1L << AFTER) | (1L << NEAR) | (1L << OVERLAPS) | (1L << LALIGN) | (1L << RALIGN))) != 0)) ) {
				_localctx.@operator = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 98;
			Match(LPAREN);
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
				{
				{
				State = 99;
				locnArg();
				State = 104;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 100;
						Match(T__0);
						State = 101;
						locnArg();
						}
						} 
					}
					State = 106;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 107;
					Match(T__0);
					State = 108;
					locsArg();
					}
				}

				}
				}
				break;
			case T__7:
				{
				State = 111;
				locsArg();
				}
				break;
			case RPAREN:
				break;
			default:
				break;
			}
			State = 114;
			Match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocopContext[] locop() {
			return GetRuleContexts<LocopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocopContext locop(int i) {
			return GetRuleContext<LocopContext>(i);
		}
		public LocExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterLocExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitLocExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocExprContext locExpr() {
		LocExprContext _localctx = new LocExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_locExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			pair();
			State = 120;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 117;
					locop();
					State = 118;
					pair();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 122;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocnArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(pythiaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(pythiaParser.INT, 0); }
		public LocnArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locnArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterLocnArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitLocnArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocnArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocnArgContext locnArg() {
		LocnArgContext _localctx = new LocnArgContext(Context, State);
		EnterRule(_localctx, 20, RULE_locnArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 125;
			Match(EQ);
			State = 126;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocsArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(pythiaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(pythiaParser.ID, 0); }
		public LocsArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locsArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterLocsArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitLocsArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocsArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocsArgContext locsArg() {
		LocsArgContext _localctx = new LocsArgContext(Context, State);
		EnterRule(_localctx, 22, RULE_locsArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(T__7);
			State = 129;
			Match(EQ);
			State = 130;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return docExpr_sempred((DocExprContext)_localctx, predIndex);
		case 4: return txtExpr_sempred((TxtExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool docExpr_sempred(DocExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool txtExpr_sempred(TxtExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x36', '\x87', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x5', 
		'\x2', '\x1C', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x1F', '\n', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x6', 
		'\x3', '%', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '&', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x38', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'=', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '@', '\v', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'I', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', 'N', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', 'Q', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', 'V', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', ']', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x62', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 'i', '\n', '\n', '\f', '\n', 
		'\xE', '\n', 'l', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'p', 
		'\n', '\n', '\x3', '\n', '\x5', '\n', 's', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x6', '\v', 
		'{', '\n', '\v', '\r', '\v', '\xE', '\v', '|', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x2', '\x4', '\b', '\n', '\xE', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x2', 
		'\a', '\x4', '\x2', '\x15', '\x16', '\x1E', '\x1F', '\x4', '\x2', '\x15', 
		'\x16', '\x1F', '\x1F', '\x3', '\x2', '!', '.', '\x4', '\x2', '\xE', '\x14', 
		'\x17', '\x1D', '\x3', '\x2', '\x4', '\t', '\x2', '\x8A', '\x2', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\"', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'*', '\x3', '\x2', '\x2', '\x2', '\b', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'H', '\x3', '\x2', '\x2', '\x2', '\f', 'R', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'Y', '\x3', '\x2', '\x2', '\x2', '\x10', '^', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x63', '\x3', '\x2', '\x2', '\x2', '\x14', 'v', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '~', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1C', '\x5', '\x4', '\x3', 
		'\x2', '\x1B', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1F', '\x5', '\x6', '\x4', '\x2', '\x1E', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', 
		'\x2', '\x2', '\x2', ' ', '!', '\x5', '\n', '\x6', '\x2', '!', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\"', '$', '\a', '\v', '\x2', '\x2', '#', 
		'%', '\a', '/', '\x2', '\x2', '$', '#', '\x3', '\x2', '\x2', '\x2', '%', 
		'&', '\x3', '\x2', '\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', 
		'&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', 
		'\x2', '(', ')', '\a', '\r', '\x2', '\x2', ')', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '*', '+', '\a', '\f', '\x2', '\x2', '+', ',', '\x5', '\b', '\x5', 
		'\x2', ',', '-', '\a', '\r', '\x2', '\x2', '-', '\a', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\b', '\x5', '\x1', '\x2', '/', '\x30', '\a', '\x32', 
		'\x2', '\x2', '\x30', '\x31', '\x5', '\b', '\x5', '\x2', '\x31', '\x32', 
		'\a', '\x33', '\x2', '\x2', '\x32', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x34', '\a', '\x34', '\x2', '\x2', '\x34', '\x35', '\x5', '\x10', 
		'\t', '\x2', '\x35', '\x36', '\a', '\x35', '\x2', '\x2', '\x36', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '.', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x38', '>', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\f', '\x5', '\x2', '\x2', ':', ';', '\t', '\x2', 
		'\x2', '\x2', ';', '=', '\x5', '\b', '\x5', '\x6', '<', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', 
		'\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '\t', 
		'\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\b', '\x6', '\x1', '\x2', '\x42', '\x43', '\a', '\x32', '\x2', 
		'\x2', '\x43', '\x44', '\x5', '\n', '\x6', '\x2', '\x44', '\x45', '\a', 
		'\x33', '\x2', '\x2', '\x45', 'I', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'I', '\x5', '\x14', '\v', '\x2', 'G', 'I', '\x5', '\f', '\a', '\x2', 'H', 
		'\x41', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'K', '\f', '\x6', '\x2', '\x2', 'K', 'L', '\t', '\x3', '\x2', 
		'\x2', 'L', 'N', '\x5', '\n', '\x6', '\a', 'M', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\a', '\x34', 
		'\x2', '\x2', 'S', 'V', '\x5', '\x10', '\t', '\x2', 'T', 'V', '\x5', '\xE', 
		'\b', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\x35', 
		'\x2', '\x2', 'X', '\r', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', '\a', 
		'\x30', '\x2', '\x2', 'Z', '[', '\t', '\x4', '\x2', '\x2', '[', ']', '\a', 
		' ', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', 
		'\x2', '\x2', '\x2', ']', '\xF', '\x3', '\x2', '\x2', '\x2', '^', '\x61', 
		'\a', '/', '\x2', '\x2', '_', '`', '\t', '\x4', '\x2', '\x2', '`', '\x62', 
		'\a', ' ', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x64', '\t', '\x5', '\x2', '\x2', '\x64', 'r', '\a', '\x32', 
		'\x2', '\x2', '\x65', 'j', '\x5', '\x16', '\f', '\x2', '\x66', 'g', '\a', 
		'\x3', '\x2', '\x2', 'g', 'i', '\x5', '\x16', '\f', '\x2', 'h', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', '\x2', '\x2', '\x2', 'j', 
		'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 
		'k', 'o', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\a', '\x3', '\x2', '\x2', 'n', 'p', '\x5', '\x18', '\r', '\x2', 
		'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 
		'p', 's', '\x3', '\x2', '\x2', '\x2', 'q', 's', '\x5', '\x18', '\r', '\x2', 
		'r', '\x65', '\x3', '\x2', '\x2', '\x2', 'r', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', 
		'\x2', 't', 'u', '\a', '\x33', '\x2', '\x2', 'u', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'z', '\x5', '\f', '\a', '\x2', 'w', 'x', '\x5', '\x12', 
		'\n', '\x2', 'x', 'y', '\x5', '\f', '\a', '\x2', 'y', '{', '\x3', '\x2', 
		'\x2', '\x2', 'z', 'w', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', 
		'\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', 
		'\x2', '\x2', '}', '\x15', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\t', 
		'\x6', '\x2', '\x2', '\x7F', '\x80', '\a', ')', '\x2', '\x2', '\x80', 
		'\x81', '\a', '\x31', '\x2', '\x2', '\x81', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\a', '\n', '\x2', '\x2', '\x83', '\x84', '\a', 
		')', '\x2', '\x2', '\x84', '\x85', '\a', '/', '\x2', '\x2', '\x85', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x1B', '\x1E', '&', '\x37', '>', 
		'H', 'O', 'U', '\\', '\x61', 'j', 'o', 'r', '|',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
