//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from pythia.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Pythia.Core.Query {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class pythiaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, CSET1C=9, 
		CSET1D=10, CSET0=11, NOTINSIDE=12, NOTBEFORE=13, NOTAFTER=14, NOTNEAR=15, 
		NOTOVERLAPS=16, NOTLALIGN=17, NOTRALIGN=18, ANDNOT=19, ORNOT=20, INSIDE=21, 
		BEFORE=22, AFTER=23, NEAR=24, OVERLAPS=25, LALIGN=26, RALIGN=27, AND=28, 
		OR=29, QVALUE=30, CONTAINS=31, STARTSWITH=32, ENDSWITH=33, REGEXP=34, 
		WILDCARDS=35, SIMILAR=36, LTEQ=37, GTEQ=38, EQ=39, EQN=40, NEQ=41, NEQN=42, 
		LT=43, GT=44, ID=45, SID=46, INT=47, LPAREN=48, RPAREN=49, LSQUARE=50, 
		RSQUARE=51, WS=52;
	public const int
		RULE_query = 0, RULE_corSet = 1, RULE_docSet = 2, RULE_docExpr = 3, RULE_txtExpr = 4, 
		RULE_pair = 5, RULE_spair = 6, RULE_tpair = 7, RULE_locop = 8, RULE_locExpr = 9, 
		RULE_locnArg = 10, RULE_locsArg = 11;
	public static readonly string[] ruleNames = {
		"query", "corSet", "docSet", "docExpr", "txtExpr", "pair", "spair", "tpair", 
		"locop", "locExpr", "locnArg", "locsArg"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'n'", "'m'", "'ns'", "'ms'", "'ne'", "'me'", "'s'", "'@@'", 
		"'@'", "';'", null, null, null, null, null, null, null, null, null, "'INSIDE'", 
		"'BEFORE'", "'AFTER'", "'NEAR'", "'OVERLAPS'", "'LALIGN'", "'RALIGN'", 
		"'AND'", "'OR'", null, "'*='", "'^='", "'$='", "'~='", "'?='", "'%='", 
		"'<='", "'>='", "'='", "'=='", "'<>'", "'!='", "'<'", "'>'", null, null, 
		null, "'('", "')'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "CSET1C", "CSET1D", 
		"CSET0", "NOTINSIDE", "NOTBEFORE", "NOTAFTER", "NOTNEAR", "NOTOVERLAPS", 
		"NOTLALIGN", "NOTRALIGN", "ANDNOT", "ORNOT", "INSIDE", "BEFORE", "AFTER", 
		"NEAR", "OVERLAPS", "LALIGN", "RALIGN", "AND", "OR", "QVALUE", "CONTAINS", 
		"STARTSWITH", "ENDSWITH", "REGEXP", "WILDCARDS", "SIMILAR", "LTEQ", "GTEQ", 
		"EQ", "EQN", "NEQ", "NEQN", "LT", "GT", "ID", "SID", "INT", "LPAREN", 
		"RPAREN", "LSQUARE", "RSQUARE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "pythia.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static pythiaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public pythiaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public pythiaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TxtExprContext txtExpr() {
			return GetRuleContext<TxtExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CorSetContext corSet() {
			return GetRuleContext<CorSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocSetContext docSet() {
			return GetRuleContext<DocSetContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CSET1C) {
				{
				State = 24;
				corSet();
				}
			}

			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CSET1D) {
				{
				State = 27;
				docSet();
				}
			}

			State = 30;
			txtExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CorSetContext : ParserRuleContext {
		public IToken delim;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSET1C() { return GetToken(pythiaParser.CSET1C, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSET0() { return GetToken(pythiaParser.CSET0, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(pythiaParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(pythiaParser.ID, i);
		}
		public CorSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_corSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterCorSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitCorSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCorSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CorSetContext corSet() {
		CorSetContext _localctx = new CorSetContext(Context, State);
		EnterRule(_localctx, 2, RULE_corSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			_localctx.delim = Match(CSET1C);
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 33;
				Match(ID);
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 38;
			_localctx.delim = Match(CSET0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocSetContext : ParserRuleContext {
		public IToken delim;
		[System.Diagnostics.DebuggerNonUserCode] public DocExprContext docExpr() {
			return GetRuleContext<DocExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSET1D() { return GetToken(pythiaParser.CSET1D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSET0() { return GetToken(pythiaParser.CSET0, 0); }
		public DocSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_docSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterDocSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitDocSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocSetContext docSet() {
		DocSetContext _localctx = new DocSetContext(Context, State);
		EnterRule(_localctx, 4, RULE_docSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_localctx.delim = Match(CSET1D);
			State = 41;
			docExpr(0);
			State = 42;
			_localctx.delim = Match(CSET0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pythiaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DocExprContext[] docExpr() {
			return GetRuleContexts<DocExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocExprContext docExpr(int i) {
			return GetRuleContext<DocExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pythiaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE() { return GetToken(pythiaParser.LSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TpairContext tpair() {
			return GetRuleContext<TpairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE() { return GetToken(pythiaParser.RSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(pythiaParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(pythiaParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDNOT() { return GetToken(pythiaParser.ANDNOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORNOT() { return GetToken(pythiaParser.ORNOT, 0); }
		public DocExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_docExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterDocExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitDocExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocExprContext docExpr() {
		return docExpr(0);
	}

	private DocExprContext docExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DocExprContext _localctx = new DocExprContext(Context, _parentState);
		DocExprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_docExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				State = 45;
				Match(LPAREN);
				State = 46;
				docExpr(0);
				State = 47;
				Match(RPAREN);
				}
				break;
			case LSQUARE:
				{
				State = 49;
				Match(LSQUARE);
				State = 50;
				tpair();
				State = 51;
				Match(RSQUARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 60;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DocExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_docExpr);
					State = 55;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 56;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 806879232L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 57;
					docExpr(4);
					}
					} 
				}
				State = 62;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TxtExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pythiaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TxtExprContext[] txtExpr() {
			return GetRuleContexts<TxtExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TxtExprContext txtExpr(int i) {
			return GetRuleContext<TxtExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pythiaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocExprContext locExpr() {
			return GetRuleContext<LocExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair() {
			return GetRuleContext<PairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(pythiaParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(pythiaParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORNOT() { return GetToken(pythiaParser.ORNOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDNOT() { return GetToken(pythiaParser.ANDNOT, 0); }
		public TxtExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_txtExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterTxtExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitTxtExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTxtExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TxtExprContext txtExpr() {
		return txtExpr(0);
	}

	private TxtExprContext txtExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TxtExprContext _localctx = new TxtExprContext(Context, _parentState);
		TxtExprContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_txtExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 64;
				Match(LPAREN);
				State = 65;
				txtExpr(0);
				State = 66;
				Match(RPAREN);
				}
				break;
			case 2:
				{
				State = 68;
				locExpr();
				}
				break;
			case 3:
				{
				State = 69;
				pair();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 77;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TxtExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_txtExpr);
					State = 72;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 73;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 806879232L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 74;
					txtExpr(5);
					}
					} 
				}
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE() { return GetToken(pythiaParser.LSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE() { return GetToken(pythiaParser.RSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TpairContext tpair() {
			return GetRuleContext<TpairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpairContext spair() {
			return GetRuleContext<SpairContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 10, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(LSQUARE);
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 81;
				tpair();
				}
				break;
			case SID:
				{
				State = 82;
				spair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 85;
			Match(RSQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpairContext : ParserRuleContext {
		public IToken name;
		public IToken @operator;
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SID() { return GetToken(pythiaParser.SID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QVALUE() { return GetToken(pythiaParser.QVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(pythiaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(pythiaParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(pythiaParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTSWITH() { return GetToken(pythiaParser.STARTSWITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDSWITH() { return GetToken(pythiaParser.ENDSWITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(pythiaParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WILDCARDS() { return GetToken(pythiaParser.WILDCARDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(pythiaParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQN() { return GetToken(pythiaParser.EQN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQN() { return GetToken(pythiaParser.NEQN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(pythiaParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEQ() { return GetToken(pythiaParser.LTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(pythiaParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(pythiaParser.GTEQ, 0); }
		public SpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterSpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitSpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpairContext spair() {
		SpairContext _localctx = new SpairContext(Context, State);
		EnterRule(_localctx, 12, RULE_spair);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_localctx.name = Match(SID);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35182224605184L) != 0)) {
				{
				State = 88;
				_localctx.@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 35182224605184L) != 0)) ) {
					_localctx.@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 89;
				_localctx.value = Match(QVALUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TpairContext : ParserRuleContext {
		public IToken name;
		public IToken @operator;
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(pythiaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QVALUE() { return GetToken(pythiaParser.QVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(pythiaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(pythiaParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(pythiaParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTSWITH() { return GetToken(pythiaParser.STARTSWITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDSWITH() { return GetToken(pythiaParser.ENDSWITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(pythiaParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WILDCARDS() { return GetToken(pythiaParser.WILDCARDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(pythiaParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQN() { return GetToken(pythiaParser.EQN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQN() { return GetToken(pythiaParser.NEQN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(pythiaParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEQ() { return GetToken(pythiaParser.LTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(pythiaParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(pythiaParser.GTEQ, 0); }
		public TpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterTpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitTpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TpairContext tpair() {
		TpairContext _localctx = new TpairContext(Context, State);
		EnterRule(_localctx, 14, RULE_tpair);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_localctx.name = Match(ID);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35182224605184L) != 0)) {
				{
				State = 93;
				_localctx.@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 35182224605184L) != 0)) ) {
					_localctx.@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 94;
				_localctx.value = Match(QVALUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocopContext : ParserRuleContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pythiaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pythiaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEAR() { return GetToken(pythiaParser.NEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(pythiaParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(pythiaParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSIDE() { return GetToken(pythiaParser.INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(pythiaParser.OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LALIGN() { return GetToken(pythiaParser.LALIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RALIGN() { return GetToken(pythiaParser.RALIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNEAR() { return GetToken(pythiaParser.NOTNEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTBEFORE() { return GetToken(pythiaParser.NOTBEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTAFTER() { return GetToken(pythiaParser.NOTAFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTINSIDE() { return GetToken(pythiaParser.NOTINSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTOVERLAPS() { return GetToken(pythiaParser.NOTOVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTLALIGN() { return GetToken(pythiaParser.NOTLALIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTRALIGN() { return GetToken(pythiaParser.NOTRALIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocnArgContext[] locnArg() {
			return GetRuleContexts<LocnArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocnArgContext locnArg(int i) {
			return GetRuleContext<LocnArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocsArgContext locsArg() {
			return GetRuleContext<LocsArgContext>(0);
		}
		public LocopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterLocop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitLocop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocopContext locop() {
		LocopContext _localctx = new LocopContext(Context, State);
		EnterRule(_localctx, 16, RULE_locop);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 97;
			_localctx.@operator = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 266858496L) != 0)) ) {
				_localctx.@operator = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 98;
			Match(LPAREN);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 252L) != 0)) {
				{
				State = 99;
				locnArg();
				State = 104;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 100;
						Match(T__0);
						State = 101;
						locnArg();
						}
						} 
					}
					State = 106;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 107;
					Match(T__0);
					State = 108;
					locsArg();
					}
				}

				}
			}

			State = 113;
			Match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocopContext[] locop() {
			return GetRuleContexts<LocopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocopContext locop(int i) {
			return GetRuleContext<LocopContext>(i);
		}
		public LocExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterLocExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitLocExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocExprContext locExpr() {
		LocExprContext _localctx = new LocExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_locExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			pair();
			State = 119;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 116;
					locop();
					State = 117;
					pair();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocnArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(pythiaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(pythiaParser.INT, 0); }
		public LocnArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locnArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterLocnArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitLocnArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocnArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocnArgContext locnArg() {
		LocnArgContext _localctx = new LocnArgContext(Context, State);
		EnterRule(_localctx, 20, RULE_locnArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 252L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 124;
			Match(EQ);
			State = 125;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocsArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(pythiaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(pythiaParser.ID, 0); }
		public LocsArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locsArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.EnterLocsArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpythiaListener typedListener = listener as IpythiaListener;
			if (typedListener != null) typedListener.ExitLocsArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpythiaVisitor<TResult> typedVisitor = visitor as IpythiaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocsArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocsArgContext locsArg() {
		LocsArgContext _localctx = new LocsArgContext(Context, State);
		EnterRule(_localctx, 22, RULE_locsArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(T__7);
			State = 128;
			Match(EQ);
			State = 129;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return docExpr_sempred((DocExprContext)_localctx, predIndex);
		case 4: return txtExpr_sempred((TxtExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool docExpr_sempred(DocExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool txtExpr_sempred(TxtExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,52,132,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,3,0,26,8,0,1,0,3,0,29,8,0,
		1,0,1,0,1,1,1,1,4,1,35,8,1,11,1,12,1,36,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,54,8,3,1,3,1,3,1,3,5,3,59,8,3,10,3,12,
		3,62,9,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,71,8,4,1,4,1,4,1,4,5,4,76,8,4,
		10,4,12,4,79,9,4,1,5,1,5,1,5,3,5,84,8,5,1,5,1,5,1,6,1,6,1,6,3,6,91,8,6,
		1,7,1,7,1,7,3,7,96,8,7,1,8,1,8,1,8,1,8,1,8,5,8,103,8,8,10,8,12,8,106,9,
		8,1,8,1,8,3,8,110,8,8,3,8,112,8,8,1,8,1,8,1,9,1,9,1,9,1,9,4,9,120,8,9,
		11,9,12,9,121,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,0,2,6,8,12,
		0,2,4,6,8,10,12,14,16,18,20,22,0,4,2,0,19,20,28,29,1,0,31,44,2,0,12,18,
		21,27,1,0,2,7,134,0,25,1,0,0,0,2,32,1,0,0,0,4,40,1,0,0,0,6,53,1,0,0,0,
		8,70,1,0,0,0,10,80,1,0,0,0,12,87,1,0,0,0,14,92,1,0,0,0,16,97,1,0,0,0,18,
		115,1,0,0,0,20,123,1,0,0,0,22,127,1,0,0,0,24,26,3,2,1,0,25,24,1,0,0,0,
		25,26,1,0,0,0,26,28,1,0,0,0,27,29,3,4,2,0,28,27,1,0,0,0,28,29,1,0,0,0,
		29,30,1,0,0,0,30,31,3,8,4,0,31,1,1,0,0,0,32,34,5,9,0,0,33,35,5,45,0,0,
		34,33,1,0,0,0,35,36,1,0,0,0,36,34,1,0,0,0,36,37,1,0,0,0,37,38,1,0,0,0,
		38,39,5,11,0,0,39,3,1,0,0,0,40,41,5,10,0,0,41,42,3,6,3,0,42,43,5,11,0,
		0,43,5,1,0,0,0,44,45,6,3,-1,0,45,46,5,48,0,0,46,47,3,6,3,0,47,48,5,49,
		0,0,48,54,1,0,0,0,49,50,5,50,0,0,50,51,3,14,7,0,51,52,5,51,0,0,52,54,1,
		0,0,0,53,44,1,0,0,0,53,49,1,0,0,0,54,60,1,0,0,0,55,56,10,3,0,0,56,57,7,
		0,0,0,57,59,3,6,3,4,58,55,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,60,61,1,
		0,0,0,61,7,1,0,0,0,62,60,1,0,0,0,63,64,6,4,-1,0,64,65,5,48,0,0,65,66,3,
		8,4,0,66,67,5,49,0,0,67,71,1,0,0,0,68,71,3,18,9,0,69,71,3,10,5,0,70,63,
		1,0,0,0,70,68,1,0,0,0,70,69,1,0,0,0,71,77,1,0,0,0,72,73,10,4,0,0,73,74,
		7,0,0,0,74,76,3,8,4,5,75,72,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,
		1,0,0,0,78,9,1,0,0,0,79,77,1,0,0,0,80,83,5,50,0,0,81,84,3,14,7,0,82,84,
		3,12,6,0,83,81,1,0,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,86,5,51,0,0,86,11,
		1,0,0,0,87,90,5,46,0,0,88,89,7,1,0,0,89,91,5,30,0,0,90,88,1,0,0,0,90,91,
		1,0,0,0,91,13,1,0,0,0,92,95,5,45,0,0,93,94,7,1,0,0,94,96,5,30,0,0,95,93,
		1,0,0,0,95,96,1,0,0,0,96,15,1,0,0,0,97,98,7,2,0,0,98,111,5,48,0,0,99,104,
		3,20,10,0,100,101,5,1,0,0,101,103,3,20,10,0,102,100,1,0,0,0,103,106,1,
		0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,109,1,0,0,0,106,104,1,0,0,0,
		107,108,5,1,0,0,108,110,3,22,11,0,109,107,1,0,0,0,109,110,1,0,0,0,110,
		112,1,0,0,0,111,99,1,0,0,0,111,112,1,0,0,0,112,113,1,0,0,0,113,114,5,49,
		0,0,114,17,1,0,0,0,115,119,3,10,5,0,116,117,3,16,8,0,117,118,3,10,5,0,
		118,120,1,0,0,0,119,116,1,0,0,0,120,121,1,0,0,0,121,119,1,0,0,0,121,122,
		1,0,0,0,122,19,1,0,0,0,123,124,7,3,0,0,124,125,5,39,0,0,125,126,5,47,0,
		0,126,21,1,0,0,0,127,128,5,8,0,0,128,129,5,39,0,0,129,130,5,45,0,0,130,
		23,1,0,0,0,14,25,28,36,53,60,70,77,83,90,95,104,109,111,121
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Pythia.Core.Query
