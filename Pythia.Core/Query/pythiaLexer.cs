//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from pythia.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Pythia.Core.Query {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class pythiaLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, CSET1C=9, 
		CSET1D=10, CSET0=11, NOTINSIDE=12, NOTBEFORE=13, NOTAFTER=14, NOTNEAR=15, 
		NOTOVERLAPS=16, NOTLALIGN=17, NOTRALIGN=18, ANDNOT=19, ORNOT=20, INSIDE=21, 
		BEFORE=22, AFTER=23, NEAR=24, OVERLAPS=25, LALIGN=26, RALIGN=27, AND=28, 
		OR=29, QVALUE=30, CONTAINS=31, STARTSWITH=32, ENDSWITH=33, REGEXP=34, 
		WILDCARDS=35, SIMILAR=36, LTEQ=37, GTEQ=38, EQ=39, EQN=40, NEQ=41, NEQN=42, 
		LT=43, GT=44, ID=45, SID=46, INT=47, LPAREN=48, RPAREN=49, LSQUARE=50, 
		RSQUARE=51, WS=52;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "CSET1C", 
		"CSET1D", "CSET0", "NOTINSIDE", "NOTBEFORE", "NOTAFTER", "NOTNEAR", "NOTOVERLAPS", 
		"NOTLALIGN", "NOTRALIGN", "ANDNOT", "ORNOT", "INSIDE", "BEFORE", "AFTER", 
		"NEAR", "OVERLAPS", "LALIGN", "RALIGN", "AND", "OR", "QVALUE", "CONTAINS", 
		"STARTSWITH", "ENDSWITH", "REGEXP", "WILDCARDS", "SIMILAR", "LTEQ", "GTEQ", 
		"EQ", "EQN", "NEQ", "NEQN", "LT", "GT", "ID", "ID_HEAD", "ID_BODY", "SID", 
		"INT", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "WS"
	};


	public pythiaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public pythiaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "'n'", "'m'", "'ns'", "'ms'", "'ne'", "'me'", "'s'", "'@@'", 
		"'@'", "';'", null, null, null, null, null, null, null, null, null, "'INSIDE'", 
		"'BEFORE'", "'AFTER'", "'NEAR'", "'OVERLAPS'", "'LALIGN'", "'RALIGN'", 
		"'AND'", "'OR'", null, "'*='", "'^='", "'$='", "'~='", "'?='", "'%='", 
		"'<='", "'>='", "'='", "'=='", "'<>'", "'!='", "'<'", "'>'", null, null, 
		null, "'('", "')'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "CSET1C", "CSET1D", 
		"CSET0", "NOTINSIDE", "NOTBEFORE", "NOTAFTER", "NOTNEAR", "NOTOVERLAPS", 
		"NOTLALIGN", "NOTRALIGN", "ANDNOT", "ORNOT", "INSIDE", "BEFORE", "AFTER", 
		"NEAR", "OVERLAPS", "LALIGN", "RALIGN", "AND", "OR", "QVALUE", "CONTAINS", 
		"STARTSWITH", "ENDSWITH", "REGEXP", "WILDCARDS", "SIMILAR", "LTEQ", "GTEQ", 
		"EQ", "EQN", "NEQ", "NEQN", "LT", "GT", "ID", "SID", "INT", "LPAREN", 
		"RPAREN", "LSQUARE", "RSQUARE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "pythia.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static pythiaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,52,415,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,1,1,1,1,2,1,2,1,
		3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,
		1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,4,11,142,8,11,11,11,12,11,143,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,4,12,158,8,12,
		11,12,12,12,159,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
		1,13,4,13,174,8,13,11,13,12,13,175,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
		1,14,1,14,1,14,1,14,4,14,189,8,14,11,14,12,14,190,1,14,1,14,1,14,1,14,
		1,14,1,15,1,15,1,15,1,15,1,15,4,15,203,8,15,11,15,12,15,204,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,4,16,221,8,
		16,11,16,12,16,222,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
		17,1,17,4,17,237,8,17,11,17,12,17,238,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,18,1,18,1,18,1,18,1,18,4,18,253,8,18,11,18,12,18,254,1,18,1,18,1,
		18,1,18,1,19,1,19,1,19,1,19,4,19,265,8,19,11,19,12,19,266,1,19,1,19,1,
		19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,
		24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,
		28,1,29,1,29,5,29,330,8,29,10,29,12,29,333,9,29,1,29,1,29,1,30,1,30,1,
		30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,
		35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,
		40,1,40,1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,5,44,379,8,44,
		10,44,12,44,382,9,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,5,47,391,8,47,
		10,47,12,47,394,9,47,1,48,4,48,397,8,48,11,48,12,48,398,1,49,1,49,1,50,
		1,50,1,51,1,51,1,52,1,52,1,53,4,53,410,8,53,11,53,12,53,411,1,53,1,53,
		0,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
		27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
		51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
		75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,0,93,0,95,46,97,47,
		99,48,101,49,103,50,105,51,107,52,1,0,5,3,0,9,10,13,13,32,32,1,0,34,34,
		3,0,65,90,95,95,97,122,2,0,45,45,48,57,1,0,48,57,428,0,1,1,0,0,0,0,3,1,
		0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
		15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
		0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
		0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
		0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,95,
		1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
		0,0,0,0,107,1,0,0,0,1,109,1,0,0,0,3,111,1,0,0,0,5,113,1,0,0,0,7,115,1,
		0,0,0,9,118,1,0,0,0,11,121,1,0,0,0,13,124,1,0,0,0,15,127,1,0,0,0,17,129,
		1,0,0,0,19,132,1,0,0,0,21,134,1,0,0,0,23,136,1,0,0,0,25,152,1,0,0,0,27,
		168,1,0,0,0,29,183,1,0,0,0,31,197,1,0,0,0,33,215,1,0,0,0,35,231,1,0,0,
		0,37,247,1,0,0,0,39,260,1,0,0,0,41,272,1,0,0,0,43,279,1,0,0,0,45,286,1,
		0,0,0,47,292,1,0,0,0,49,297,1,0,0,0,51,306,1,0,0,0,53,313,1,0,0,0,55,320,
		1,0,0,0,57,324,1,0,0,0,59,327,1,0,0,0,61,336,1,0,0,0,63,339,1,0,0,0,65,
		342,1,0,0,0,67,345,1,0,0,0,69,348,1,0,0,0,71,351,1,0,0,0,73,354,1,0,0,
		0,75,357,1,0,0,0,77,360,1,0,0,0,79,362,1,0,0,0,81,365,1,0,0,0,83,368,1,
		0,0,0,85,371,1,0,0,0,87,373,1,0,0,0,89,375,1,0,0,0,91,383,1,0,0,0,93,385,
		1,0,0,0,95,387,1,0,0,0,97,396,1,0,0,0,99,400,1,0,0,0,101,402,1,0,0,0,103,
		404,1,0,0,0,105,406,1,0,0,0,107,409,1,0,0,0,109,110,5,44,0,0,110,2,1,0,
		0,0,111,112,5,110,0,0,112,4,1,0,0,0,113,114,5,109,0,0,114,6,1,0,0,0,115,
		116,5,110,0,0,116,117,5,115,0,0,117,8,1,0,0,0,118,119,5,109,0,0,119,120,
		5,115,0,0,120,10,1,0,0,0,121,122,5,110,0,0,122,123,5,101,0,0,123,12,1,
		0,0,0,124,125,5,109,0,0,125,126,5,101,0,0,126,14,1,0,0,0,127,128,5,115,
		0,0,128,16,1,0,0,0,129,130,5,64,0,0,130,131,5,64,0,0,131,18,1,0,0,0,132,
		133,5,64,0,0,133,20,1,0,0,0,134,135,5,59,0,0,135,22,1,0,0,0,136,137,5,
		78,0,0,137,138,5,79,0,0,138,139,5,84,0,0,139,141,1,0,0,0,140,142,7,0,0,
		0,141,140,1,0,0,0,142,143,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,
		145,1,0,0,0,145,146,5,73,0,0,146,147,5,78,0,0,147,148,5,83,0,0,148,149,
		5,73,0,0,149,150,5,68,0,0,150,151,5,69,0,0,151,24,1,0,0,0,152,153,5,78,
		0,0,153,154,5,79,0,0,154,155,5,84,0,0,155,157,1,0,0,0,156,158,7,0,0,0,
		157,156,1,0,0,0,158,159,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,161,
		1,0,0,0,161,162,5,66,0,0,162,163,5,69,0,0,163,164,5,70,0,0,164,165,5,79,
		0,0,165,166,5,82,0,0,166,167,5,69,0,0,167,26,1,0,0,0,168,169,5,78,0,0,
		169,170,5,79,0,0,170,171,5,84,0,0,171,173,1,0,0,0,172,174,7,0,0,0,173,
		172,1,0,0,0,174,175,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,177,1,
		0,0,0,177,178,5,65,0,0,178,179,5,70,0,0,179,180,5,84,0,0,180,181,5,69,
		0,0,181,182,5,82,0,0,182,28,1,0,0,0,183,184,5,78,0,0,184,185,5,79,0,0,
		185,186,5,84,0,0,186,188,1,0,0,0,187,189,7,0,0,0,188,187,1,0,0,0,189,190,
		1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,193,5,78,0,
		0,193,194,5,69,0,0,194,195,5,65,0,0,195,196,5,82,0,0,196,30,1,0,0,0,197,
		198,5,78,0,0,198,199,5,79,0,0,199,200,5,84,0,0,200,202,1,0,0,0,201,203,
		7,0,0,0,202,201,1,0,0,0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,
		0,205,206,1,0,0,0,206,207,5,79,0,0,207,208,5,86,0,0,208,209,5,69,0,0,209,
		210,5,82,0,0,210,211,5,76,0,0,211,212,5,65,0,0,212,213,5,80,0,0,213,214,
		5,83,0,0,214,32,1,0,0,0,215,216,5,78,0,0,216,217,5,79,0,0,217,218,5,84,
		0,0,218,220,1,0,0,0,219,221,7,0,0,0,220,219,1,0,0,0,221,222,1,0,0,0,222,
		220,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,225,5,76,0,0,225,226,5,
		65,0,0,226,227,5,76,0,0,227,228,5,73,0,0,228,229,5,71,0,0,229,230,5,78,
		0,0,230,34,1,0,0,0,231,232,5,78,0,0,232,233,5,79,0,0,233,234,5,84,0,0,
		234,236,1,0,0,0,235,237,7,0,0,0,236,235,1,0,0,0,237,238,1,0,0,0,238,236,
		1,0,0,0,238,239,1,0,0,0,239,240,1,0,0,0,240,241,5,82,0,0,241,242,5,65,
		0,0,242,243,5,76,0,0,243,244,5,73,0,0,244,245,5,71,0,0,245,246,5,78,0,
		0,246,36,1,0,0,0,247,248,5,65,0,0,248,249,5,78,0,0,249,250,5,68,0,0,250,
		252,1,0,0,0,251,253,7,0,0,0,252,251,1,0,0,0,253,254,1,0,0,0,254,252,1,
		0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,257,5,78,0,0,257,258,5,79,0,
		0,258,259,5,84,0,0,259,38,1,0,0,0,260,261,5,79,0,0,261,262,5,82,0,0,262,
		264,1,0,0,0,263,265,7,0,0,0,264,263,1,0,0,0,265,266,1,0,0,0,266,264,1,
		0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,269,5,78,0,0,269,270,5,79,0,
		0,270,271,5,84,0,0,271,40,1,0,0,0,272,273,5,73,0,0,273,274,5,78,0,0,274,
		275,5,83,0,0,275,276,5,73,0,0,276,277,5,68,0,0,277,278,5,69,0,0,278,42,
		1,0,0,0,279,280,5,66,0,0,280,281,5,69,0,0,281,282,5,70,0,0,282,283,5,79,
		0,0,283,284,5,82,0,0,284,285,5,69,0,0,285,44,1,0,0,0,286,287,5,65,0,0,
		287,288,5,70,0,0,288,289,5,84,0,0,289,290,5,69,0,0,290,291,5,82,0,0,291,
		46,1,0,0,0,292,293,5,78,0,0,293,294,5,69,0,0,294,295,5,65,0,0,295,296,
		5,82,0,0,296,48,1,0,0,0,297,298,5,79,0,0,298,299,5,86,0,0,299,300,5,69,
		0,0,300,301,5,82,0,0,301,302,5,76,0,0,302,303,5,65,0,0,303,304,5,80,0,
		0,304,305,5,83,0,0,305,50,1,0,0,0,306,307,5,76,0,0,307,308,5,65,0,0,308,
		309,5,76,0,0,309,310,5,73,0,0,310,311,5,71,0,0,311,312,5,78,0,0,312,52,
		1,0,0,0,313,314,5,82,0,0,314,315,5,65,0,0,315,316,5,76,0,0,316,317,5,73,
		0,0,317,318,5,71,0,0,318,319,5,78,0,0,319,54,1,0,0,0,320,321,5,65,0,0,
		321,322,5,78,0,0,322,323,5,68,0,0,323,56,1,0,0,0,324,325,5,79,0,0,325,
		326,5,82,0,0,326,58,1,0,0,0,327,331,5,34,0,0,328,330,8,1,0,0,329,328,1,
		0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,334,1,0,0,0,
		333,331,1,0,0,0,334,335,5,34,0,0,335,60,1,0,0,0,336,337,5,42,0,0,337,338,
		5,61,0,0,338,62,1,0,0,0,339,340,5,94,0,0,340,341,5,61,0,0,341,64,1,0,0,
		0,342,343,5,36,0,0,343,344,5,61,0,0,344,66,1,0,0,0,345,346,5,126,0,0,346,
		347,5,61,0,0,347,68,1,0,0,0,348,349,5,63,0,0,349,350,5,61,0,0,350,70,1,
		0,0,0,351,352,5,37,0,0,352,353,5,61,0,0,353,72,1,0,0,0,354,355,5,60,0,
		0,355,356,5,61,0,0,356,74,1,0,0,0,357,358,5,62,0,0,358,359,5,61,0,0,359,
		76,1,0,0,0,360,361,5,61,0,0,361,78,1,0,0,0,362,363,5,61,0,0,363,364,5,
		61,0,0,364,80,1,0,0,0,365,366,5,60,0,0,366,367,5,62,0,0,367,82,1,0,0,0,
		368,369,5,33,0,0,369,370,5,61,0,0,370,84,1,0,0,0,371,372,5,60,0,0,372,
		86,1,0,0,0,373,374,5,62,0,0,374,88,1,0,0,0,375,380,3,91,45,0,376,379,3,
		91,45,0,377,379,3,93,46,0,378,376,1,0,0,0,378,377,1,0,0,0,379,382,1,0,
		0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,90,1,0,0,0,382,380,1,0,0,0,383,
		384,7,2,0,0,384,92,1,0,0,0,385,386,7,3,0,0,386,94,1,0,0,0,387,392,5,36,
		0,0,388,391,3,91,45,0,389,391,3,93,46,0,390,388,1,0,0,0,390,389,1,0,0,
		0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,96,1,0,0,0,394,392,
		1,0,0,0,395,397,7,4,0,0,396,395,1,0,0,0,397,398,1,0,0,0,398,396,1,0,0,
		0,398,399,1,0,0,0,399,98,1,0,0,0,400,401,5,40,0,0,401,100,1,0,0,0,402,
		403,5,41,0,0,403,102,1,0,0,0,404,405,5,91,0,0,405,104,1,0,0,0,406,407,
		5,93,0,0,407,106,1,0,0,0,408,410,7,0,0,0,409,408,1,0,0,0,410,411,1,0,0,
		0,411,409,1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,414,6,53,0,0,414,
		108,1,0,0,0,17,0,143,159,175,190,204,222,238,254,266,331,378,380,390,392,
		398,411,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Pythia.Core.Query
